@using X.PagedList.Mvc.Core
@using X.PagedList.EntityFramework
@using X.PagedList
@model X.PagedList.IPagedList<teleScope.Models.CustomerCallsModel>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    h1 {
        color: #333;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;

    }

    .body:hover {
        background-color: #f2e6ff;
    }

    a {
        text-decoration: none;
        color: #007bff;
    }

     a:hover {
        color: #0056b3;
     }

     h1{
         font-size: 35px;
     }

     .date-header{
         background-color: black;
         color: white;
         font-weight: bold;
         text-align: left;
         padding: 8px;
     }
</style>
<br />
<h1>Calls History</h1>
@{
    //group by date => calls
    var callsByDate = Model.GroupBy(c => c.call.CallDate.Date).OrderBy(k => k.Key);
}

@foreach (var group in callsByDate)
{
    <table class="table table-striped">

        <tbody>
            <tr class="date-header">
                <td colspan="4" class="date-header"><h4>@group.Key.ToString("dd/MM/yyyy")</h4></td>
            </tr>
            <tr>
              <td><strong>Call Type</strong></td>
              <td><strong>Destination Number</strong></td>
              <td><strong>Duration</strong></td>
              <td><strong>Time</strong></td>
            </tr>

    @foreach (var item in group)
    {
        <tr>
            <td>
                @((item.call.IsIncoming ?? false) ? "Incoming" : "Outgoing")
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.call.DestinationNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.call.Duration)
            </td>
            <td>
                @item.call.CallDate.ToString("hh:mm tt")
            </td>

        </tr>
    }
        </tbody>
    </table>
}

<nav class="pageList">
    @Html.PagedListPager(Model, page => Url.Action("Index", new { page = page }), new PagedListRenderOptions()
{
    ActiveLiElementClass = "active",
    PageClasses = new[] { "page-link" },
    LiElementClasses = new[] { "page-item" },
    UlElementClasses = new[] { "pagination", "justify-content-center", "mt-3" },
    LinkToNextPageFormat = "Next",
    LinkToPreviousPageFormat = "Previous",
    MaximumPageNumbersToDisplay = 5,
    DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
    DisplayLinkToNextPage = PagedListDisplayMode.Always,
})
</nav>